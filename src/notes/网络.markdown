http1.x

队头堵塞

慢启动

三次握手

http2.0

帧、流，管道复用

解决队头堵塞问题

多路复用

header压缩


三次握手，四次挥手

client ---> 发送连接请求 告诉服务端客户端有发送能力。           ---> server
       <--- server 发送同意请求连接 服务端有发送功能和接收功能  --->
       <--- 客户端接收到服务端返回信息连接建立。                --->


四次挥手

第一次：第一次挥手：客户端发送一个FIN=M，用来关闭客户端到服务器端的数据传送，客户端进入FIN_WAIT_1状态。意思是说"我客户端没有数据要发给你了"，但是如果你服务器端还有数据没有发送完成，则不必急着关闭连接，可以继续发送数据。


第二次：服务端收到客户端的信息后返回数据服务器端收到FIN后，先发送ack=M+1，告诉客户端，你的请求我收到了，但是我还没准备好，请继续你等我的消息。这个时候客户端就进入FIN_WAIT_2 状态，继续等待服务器端的FIN报文。


第三次挥手：当服务器端确定数据已发送完成，则向客户端发送FIN=N报文，告诉客户端，好了，我这边数据发完了，准备好关闭连接了。服务器端进入LAST_ACK状态。


第四次挥手：客户端收到FIN=N报文后，就知道可以关闭连接了，但是他还是不相信网络，怕服务器端不知道要关闭，所以发送ack=N+1后进入TIME_WAIT状态，如果Server端没有收到ACK则可以重传。服务器端收到ACK后，就知道可以断开连接了。客户端等待了2MSL后依然没有收到回复，则证明服务器端已正常关闭，那好，我客户端也可以关闭连接了。最终完成了四次握手。


https 握手

与http三次握手相似只是多了一层SSL(安全套接层)/TLS(安全传输层协议)

详细过程

1. 客户端 发送 client hello TLS版本 本地支持的密码组合(服务端选择) client rabdom 字符串 

2. 服务端 接到请求后 发送 server hello 数字证书 选择密码方式 server Random字符串

3. 客户端验证数字证书的有效性，确保对方的合法身份。如果合法 发送 premaster secret 预主密钥。

4. 服务端解析 premaster secret 。：客户端和服务器均使用 client random，server random 和 premaster secret，并通过相同的算法生成相同的共享密钥 
5. 双方 发送 加密后的finished信号

6. 握手完成建立连接





URL从输入到渲染页面的一系列流程
1. DNS 获取IP
       DNS如何进行解析？客户端向本地域名服务器请求查询，如果知道就直接返回如果不知道就向根域名服务器查询，
       返回ip或者更高级服务器地址，z直到查询到对应的ip返回给客户端
       另一种是通过本地DNS缓存进行解析。
2. 向对应服务端建立HTTP请求
       三次握手建立TCP连接，发送请求信息
3. 服务端返回页面信息
       TCP连接成功，服务器将页面数据发送给客户端
4. 浏览器解析渲染页面
       浏览器接收到服务端数据以后开始进行数据解析，页面渲染
5. 连接结束
       页面渲染完成，连接释放


TCP和UDP的理解